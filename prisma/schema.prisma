generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  name          String?
  role          String    @default("SLP")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Student {
  id             String              @id @default(cuid())
  name           String
  dateOfBirth    DateTime
  grade          String
  classroomId    String?
  teacherId      String?
  guardians      String
  iepDates       String
  notes          String?
  isActive       Boolean             @default(true)
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  classroom      Classroom?          @relation(fields: [classroomId], references: [id])
  teacher        Teacher?            @relation(fields: [teacherId], references: [id])
  goals          StudentGoal[]
  scheduleEvents ScheduleEvent[]
  notes_         Note[]
  reports        ProgressReport[]
}

model Teacher {
  id             String              @id @default(cuid())
  name           String
  email          String?
  classroom      String?
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  students       Student[]
  classrooms     Classroom[]
  scheduleEvents ScheduleEvent[]
}

model Classroom {
  id             String              @id @default(cuid())
  name           String
  teacherId      String?
  grade          String?
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  teacher        Teacher?            @relation(fields: [teacherId], references: [id])
  students       Student[]
  scheduleEvents ScheduleEvent[]
}

model GoalTemplate {
  id            String              @id @default(cuid())
  targetArea    String
  category      String
  goalText      String
  description   String?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  studentGoals  StudentGoal[]

  @@index([targetArea, category])
}

model StudentGoal {
  id            String              @id @default(cuid())
  studentId     String
  goalId        String
  isActive      Boolean             @default(true)
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  student       Student             @relation(fields: [studentId], references: [id], onDelete: Cascade)
  goal          GoalTemplate        @relation(fields: [goalId], references: [id])
  sessionData   SessionGoalData[]

  @@unique([studentId, goalId])
}

model ScheduleEvent {
  id            String              @id @default(cuid())
  date          DateTime
  startTime     String
  endTime       String
  location      String?
  studentIds    String
  teacherId     String?
  classroomId   String?
  sessionType   String              @default("Individual")
  status        String              @default("Upcoming")
  recurrenceRule String?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  teacher       Teacher?            @relation(fields: [teacherId], references: [id])
  classroom     Classroom?          @relation(fields: [classroomId], references: [id])
  students      Student[]
  session       Session?
}

model Session {
  id            String              @id @default(cuid())
  eventId       String              @unique
  date          DateTime
  studentIds    String
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  event         ScheduleEvent       @relation(fields: [eventId], references: [id], onDelete: Cascade)
  goalData      SessionGoalData[]
  notes         Note[]
}

model SessionGoalData {
  id            String              @id @default(cuid())
  sessionId     String
  studentGoalId String
  studentId     String
  accuracy      Float
  trials        Int
  promptLevel   String
  promptTypes   String
  activity      String?
  utterance     String?
  observations  String?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  session       Session             @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  studentGoal   StudentGoal         @relation(fields: [studentGoalId], references: [id])

  @@unique([sessionId, studentGoalId, studentId])
}

model Note {
  id            String              @id @default(cuid())
  sessionId     String
  studentId     String
  content       String
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  session       Session             @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  student       Student             @relation(fields: [studentId], references: [id])

  @@unique([sessionId, studentId])
}

model ProgressReport {
  id            String              @id @default(cuid())
  studentId     String
  startDate     DateTime
  endDate       DateTime
  reportData    Json
  narrative     String?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  student       Student             @relation(fields: [studentId], references: [id])
}

model Holiday {
  id            String              @id @default(cuid())
  name          String
  date          DateTime
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
}